//
//  SearchNetworkVC.m
//  mHubApp
//
//  Created by Anshul Jain on 12/03/18.
//  Copyright Â© 2018 Rave Infosys. All rights reserved.
//

#import "SearchNetworkVC.h"
#import "SetupTypeVC.h"
#import "NewSetupVC.h"
#import "ConnectionOptionVC.h"
#import "UpdateHubViewController.h"
#import "UpdateAvailableViewController.h"
#import "HubDevicesListViewController.h"
#import "SetupMismatchViewController.h"
#import "UnableAutomaticConnectViewController.h"
#import "SelectDeviceVC.h"
#import "SelectStackSystemViewController.h"
#import "SetupConfirmationVC.h"
#import "ManuallySetupVC.h"

@interface SearchNetworkVC ()
{
    bool updateFlag;
}
@property (strong, nonatomic) NSMutableArray *arrSearchData;
@property (strong, nonatomic) NSMutableArray *arrBenchmarkData;
@property (strong, nonatomic) NSMutableArray *arrAllMhubData;
@end

@implementation SearchNetworkVC

- (void)viewDidLoad {
    @try {
        [super viewDidLoad];
        self.navigationItem.backBarButtonItem = customBackBarButton;
        self.navigationItem.titleView = [CustomNavigationBar customNavigationLabel:HUB_SEARCHING_NETWORK_HEADER];
        self.view.backgroundColor = [AppDelegate appDelegate].themeColoursSetup.colorBackground;
        
        [[AppDelegate appDelegate] setShouldRotate:NO];
        [[AppDelegate appDelegate] showHudView:ShowIndicator Message:@""];
        //[[SearchDataManager sharedInstance]resetSharedInstance];
        [[SearchDataManager sharedInstance] startSearchNetwork];
        [SearchDataManager sharedInstance].delegate = self;
        [NSTimer scheduledTimerWithTimeInterval:5.0
                                         target:self
                                       selector:@selector(popViewController)
                                       userInfo:nil
                                        repeats:NO];
        
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void) viewWillAppear:(BOOL)animated {
    @try {
        [super viewWillAppear:animated];
        BOOL flag_isManaulSetupPAge =  false;
        
        if ([AppDelegate appDelegate].isSearchNetworkPopVC == true) {
                        for (UIViewController *vc in self.navigationController.viewControllers) {
                            if ([vc isKindOfClass:[ManuallySetupVC class]]) {
                                flag_isManaulSetupPAge =  true;
                            }
                        }
            if(flag_isManaulSetupPAge)
            {
                
                for (UIViewController *vc in self.navigationController.viewControllers) {
                    if ([vc isKindOfClass:[ManuallySetupVC class]]) {
                        [self.navigationController popToViewController:vc animated:false];
                    }
                }
            }
            else
            {
                [self.navigationController popToRootViewControllerAnimated:false];
            }
        }
        
        [self getBenchMarkFile];
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
 #pragma mark - Navigation
 
 // In a storyboard-based application, you will often want to do a little preparation before navigation
 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 // Get the new view controller using [segue destinationViewController].
 // Pass the selected object to the new view controller.
 }
 */

-(void)getBenchMarkFile {
    {
        
        [APIManager getBenchMarkDetails:nil updateData:nil completion:^(NSDictionary *responseObject) {
            if(responseObject != nil){
            self.arrBenchmarkData  =  (NSMutableArray *)responseObject;
            NSLog(@"SearchNetworkVC Benchmark array %@",self.arrBenchmarkData);
            }
            else
                {
                NSLog(@"SearchNetworkVC error %@",responseObject);
                }

        }];
    }
}

#pragma mark - SearchData Delegate
-(void) searchData:(SearchData *)searchData didFindDataArray:(NSMutableArray *)arrSearchedData {
    if (self.arrSearchData) {
        [self.arrSearchData removeAllObjects];
    } else {
        self.arrSearchData = [[NSMutableArray alloc] init];
    }
            for (SearchData *objData in self.arrSearchData) {
                  for (Hub *objHub in objData.arrItems) {
                NSLog(@"HubAudio objHub %@ NAD %@",objHub.modelName, objHub.Address);
                  }
            }

    [self.arrSearchData addObjectsFromArray:arrSearchedData];
    [self reloadTableViewData];
}

-(void) reloadTableViewData {
    @try {
        NSInteger intTotalDeviceCount = 0;
        NSInteger intVideoDeviceCount = 0;
        NSInteger intAudioDeviceCount = 0;
        
        
        for (SearchData *objData in self.arrSearchData) {
            intTotalDeviceCount+=objData.arrItems.count;
            if (objData.modelType == HDA_MHUBAUDIO64) {
                intAudioDeviceCount += objData.arrItems.count;
            } else {
                intVideoDeviceCount += objData.arrItems.count;
            }
            
            
            
            for (Hub *objHub in objData.arrItems) {
                
                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"product_code == %@", objHub.modelName];
                NSArray *arrCmdDataFiltered = [self.arrBenchmarkData filteredArrayUsingPredicate:predicate];
                if(arrCmdDataFiltered.count > 0)
                {
                    objHub.MHub_BenchMarkVersion = [[[arrCmdDataFiltered objectAtIndex:0]objectForKey:@"mos_version_benchmark" ]floatValue ];
                }
            }
        }

        if(_isManuallyConnectNavigation)
        {
            if (intTotalDeviceCount > 0) {
                HDASetupType setupType = HDA_SetupVideoAudio;
                if (intAudioDeviceCount > 0 && intVideoDeviceCount == 0) {
                    // DDLogDebug(@"Audio Only");
                    setupType = HDA_SetupAudio;
                } else if (intAudioDeviceCount == 0 && intVideoDeviceCount > 0) {
                    // DDLogDebug(@"Video Only");
                    setupType = HDA_SetupVideo;
                } else {
                    // DDLogDebug(@"Audio Video Both");
                    setupType = HDA_SetupVideoAudio;
                }
                [self performSelector:@selector(pushToSelectSystemFromManuallyConnect:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:setupType], @"DeviceType", nil] afterDelay:1.0];
                //[self performSelector:@selector(pushToSelectSystemFromManuallyConnect:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], @"multipleDevices", nil] afterDelay:1.0];
            } else {
                [self popViewController];
            }
            
            
        }
        else
        {
            
            [self performSelector:@selector(checkValidations) withObject:nil afterDelay:5.0];
            return;
            DDLogDebug(@"\nintTotalDeviceCount == %ld \nintVideoDeviceCount == %ld \nintAudioDeviceCount == %ld", (long)intTotalDeviceCount, (long)intVideoDeviceCount, (long)intAudioDeviceCount);
            if (intTotalDeviceCount > 0) {
                HDASetupType setupType = HDA_SetupVideoAudio;
                if (intAudioDeviceCount > 0 && intVideoDeviceCount == 0) {
                    // DDLogDebug(@"Audio Only");
                    setupType = HDA_SetupAudio;
                } else if (intAudioDeviceCount == 0 && intVideoDeviceCount > 0) {
                    // DDLogDebug(@"Video Only");
                    setupType = HDA_SetupVideo;
                } else {
                    // DDLogDebug(@"Audio Video Both");
                    setupType = HDA_SetupVideoAudio;
                }
                [self performSelector:@selector(pushToNextViewController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:setupType], @"DeviceType", nil] afterDelay:1.0];
            } else {
                [self popViewController];
            }
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)checkValidations
{
    
    @try {
        NSInteger intTotalDeviceCount = 0;
        NSInteger intVideoDeviceCount = 0;
        NSInteger intAudioDeviceCount = 0;
        self.arrAllMhubData = [[NSMutableArray alloc]init];
        int numberOfBootFlags = 0;
        int numberOfPairs = 0;
        int numberOfMaster = 0;
        int numberOfHubsLessThenRequiredVersion = 0;
        for (SearchData *objData in self.arrSearchData) {
            intTotalDeviceCount+=objData.arrItems.count;
            if (objData.modelType == HDA_MHUBAUDIO64) {
                intAudioDeviceCount += objData.arrItems.count;
            } else {
                intVideoDeviceCount += objData.arrItems.count;
            }
            for (Hub *objHub in objData.arrItems) {
                //NSLog(@"mHubAudio objHub 66%@",objHub.Address);
                if(objHub.mosVersion < 8.0 )
                {
                    numberOfHubsLessThenRequiredVersion ++;
                }
                //All Mhub found in a array
                [self.arrAllMhubData addObject:objHub];
                // Boot Flags
                if(objHub.BootFlag == true )
                {
                    // bootFlagForAll = true;
                    numberOfBootFlags ++;
                }
                // Pair Json
                if(objHub.isPaired == true )
                {
                    numberOfPairs ++;
                    //NSLog(@"self.arrAllMhubData %@ and data %d",objHub.modelName, objHub.isPaired);
                }
                // Master Json
                if(objHub.PairingDetails.master.ip_address != nil  && ![objHub.PairingDetails.master.ip_address isEqualToString:UNKNOWN_IP] )
                {
                    numberOfMaster ++;
                }
            }
        }
        
        // If Single unit found.
        if(intTotalDeviceCount == 1)
        {
            if(numberOfHubsLessThenRequiredVersion > 0)
            {
                //NSLog(@"Software less then 8");
                Hub *objHub = (Hub *)[self.arrAllMhubData objectAtIndex:0];
            if ([objHub.modelName isContainString:kDEVICEMODEL_MHUB4K431] || [objHub.modelName isContainString:kDEVICEMODEL_MHUB4K862]) {
                NSLog(@"objHub.modelName %@",objHub.modelName);
                [self performSelector:@selector(pushToSetupConfirmationVC:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:objHub, @"SingleUnitHub", nil] afterDelay:1.0];
            }
            else
                {
                [self performSelector:@selector(pushToNextViewControllerForUpdate:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:NO], @"multipleDevices", nil] afterDelay:1.0];
                }
            }
            else
            {
                if(self.arrAllMhubData.count > 0)
                {
                    Hub *objHub = (Hub *)[self.arrAllMhubData objectAtIndex:0];
                    if (objHub.mosVersion < objHub.MHub_BenchMarkVersion) {
                        [self performSelector:@selector(pushToNextViewControllerForUpdate:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:NO], @"multipleDevices", nil] afterDelay:1.0];
                    }
                    else
                    {
                        [self performSelector:@selector(pushToSetupConfirmationVC:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:objHub, @"SingleUnitHub", nil] afterDelay:1.0];
                        
                    }
                }
            }
            
        }
        //Multiple units found
        else{
            if(numberOfHubsLessThenRequiredVersion > 0)
            {
                //NSLog(@"Software Mismatch");
                [self performSelector:@selector(pushToSetupMismatchController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:true], @"DeviceType", nil] afterDelay:1.0];
                return;
            }
            if (numberOfBootFlags == [self.arrAllMhubData count]) {
                // all boot flags are true
                //NSLog(@"Pair JSON");
                if (numberOfPairs > 0 ) {
                    if (numberOfPairs == 1)
                    {
                        NSLog(@"single pair JSON, Connect directly");
                    }
                    else
                    {
                       // NSLog(@"Multiple pair JSon, select stack system");
                        [self performSelector:@selector(pushToSelectStackOrPrimaryController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:0], @"DeviceType", nil] afterDelay:1.0];
                    }
                }
                else
                {
                    //NSLog(@"No pair Json, check for master");
                    if (numberOfMaster > 0 )
                    {
                        [self performSelector:@selector(pushToUnableToConnectController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:0], @"DeviceType", nil] afterDelay:1.0];
                    }
                    else
                    {
                        self.navigateFromType = 10 ;
                        [self performSelector:@selector(pushToSelectSystemFromManuallyConnect:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:HDA_SetupVideo], @"DeviceType", nil] afterDelay:1.0];

                    }
                    
                }
                
            } else if (numberOfBootFlags == 0) {
                // all false
                //NSLog(@"All false, MULTIPLE MHUB DEVICES DISCOVERED");
                HDASetupType setupType = HDA_SetupVideoAudio;
                if (intAudioDeviceCount > 0 && intVideoDeviceCount == 0) {
                    // DDLogDebug(@"Audio Only");
                    setupType = HDA_SetupAudio;
                } else if (intAudioDeviceCount == 0 && intVideoDeviceCount > 0) {
                    // DDLogDebug(@"Video Only");
                    setupType = HDA_SetupVideo;
                } else {
                    // DDLogDebug(@"Audio Video Both");
                    setupType = HDA_SetupVideoAudio;
                }
                [self performSelector:@selector(pushToNextViewController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInteger:setupType], @"DeviceType", nil] afterDelay:1.0];
            } else {
                // different
              //  NSLog(@"Setup Mismatch");
               // NSLog(@"numberOfBootFlags %d  and [self.arrAllMhubData count] %ld",numberOfBootFlags,[self.arrAllMhubData count]);
                [self performSelector:@selector(pushToSetupMismatchController:) withObject:[NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:false], @"DeviceType", nil] afterDelay:1.0];
            }
        }
    }
    
    
    @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    
    
    
    
}
-(void)popViewController {
    @try {
        NSInteger intDeviceCount = 0;
        for (SearchData *objData in self.arrSearchData) {
            intDeviceCount+=objData.arrItems.count;
        }
        if (intDeviceCount == 0) {
            [[AppDelegate appDelegate] hideHudView:ErrorMessage Message:@"NO DEVICE FOUND"];
            [self.navigationController popViewControllerAnimated:YES];
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)pushToSetupConfirmationVC:(id)setupType
{
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[SetupConfirmationVC class]] ) {
                isVCAvailable = true;
            }
        }
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            
            Hub *setupTp = (Hub *)[setupType valueForKey:@"SingleUnitHub"] ;
            
            SetupConfirmationVC *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SetupConfirmationVC"];
            objVC.objSelectedMHubDevice = [[Hub alloc] initWithHub:setupTp];
            objVC.isSelectedPaired = false;
            objVC.arrSelectedSlaveDevice = [[NSMutableArray alloc] init];
            [self.navigationController pushViewController:objVC animated:NO];
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    
    
    
    
}

-(void)pushToSelectStackOrPrimaryController:(id)setupType
{
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[SelectStackSystemViewController class]] ) {
                isVCAvailable = true;
            }
        }
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            //            SelectDeviceVC *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SelectDeviceVC"];
            //            objVC.setupType = HDA_SetupVideoAudio;
            //            objVC.setupLevel = HDA_SetupLevelPrimary;
            //            objVC.arrSearchData = self.arrSearchData;
            //            [self.navigationController pushViewController:objVC animated:NO];
            SelectStackSystemViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SelectStackSystemViewController"];
            objVC.setupType = HDA_SetupVideoAudio;
            objVC.setupLevel = HDA_SetupLevelPrimary;
            objVC.arrSearchData = self.arrSearchData;
            objVC.arrSearchDataTemp = self.arrAllMhubData;
            [self.navigationController pushViewController:objVC animated:NO];
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)pushToSetupMismatchController:(id)setupType
{
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[SetupMismatchViewController class]] ) {
                isVCAvailable = true;
            }
        }
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            //BOOL isFlag = [setupType boolValue];
            BOOL isFlag  = (BOOL)[[setupType valueForKey:@"DeviceType"] boolValue];
            SetupMismatchViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SetupMismatchViewController"];
            objVC.arrSearchData = self.arrSearchData;
            objVC.isSoftware_mismatch = isFlag ;
            [self.navigationController pushViewController:objVC animated:NO];
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)pushToUnableToConnectController:(id)setupType
{
    
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[UnableAutomaticConnectViewController class]] ) {
                isVCAvailable = true;
            }
        }
        //DDLogDebug(@"isVCAvailable == %@", isVCAvailable ? @"true" : @"false");
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            
            UnableAutomaticConnectViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"UnableAutomaticConnectViewController"];
            objVC.arrSearchData = self.arrSearchData;
            [self.navigationController pushViewController:objVC animated:NO];
            
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    
    
    
}

-(void)pushToNextViewController:(id)setupType {
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[SetupTypeVC class]] || [vc isKindOfClass:[ConnectionOptionVC class]]) {
                isVCAvailable = true;
            }
        }
        //DDLogDebug(@"isVCAvailable == %@", isVCAvailable ? @"true" : @"false");
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            HDASetupType setupTp = (HDASetupType)[[setupType valueForKey:@"DeviceType"] integerValue];
            if (setupTp == HDA_SetupVideoAudio) {
                SetupTypeVC *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SetupTypeVC"];
                objVC.setupType = setupTp;
                objVC.arrSearchData = self.arrSearchData;
                [self.navigationController pushViewController:objVC animated:NO];
            } else {
                [self pushToConnectionOptionVC:setupTp Animated:true];
            }
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}
-(void)pushToNextViewControllerForUpdate:(id)multipleDeviceFound {
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[UpdateHubViewController class]] || [vc isKindOfClass:[UpdateAvailableViewController class]]) {
                isVCAvailable = true;
            }
        }
        //DDLogDebug(@"isVCAvailable == %@", isVCAvailable ? @"true" : @"false");
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            BOOL flag = (HDASetupType)[[multipleDeviceFound valueForKey:@"multipleDevices"] boolValue];
            if(flag)
            {
                UpdateAvailableViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"UpdateAvailableViewController"];
                objVC.arrSearchData = self.arrAllMhubData;
                [self.navigationController pushViewController:objVC animated:NO];
            }
            else
            {
                UpdateHubViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"UpdateHubViewController"];
                objVC.arrSearchData = self.arrAllMhubData;
                [self.navigationController pushViewController:objVC animated:NO];
            }
            
            
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)pushToSelectSystemFromManuallyConnect:(id)setupType {
    @try {
        NSArray *vcStack = self.navigationController.viewControllers;
        BOOL isVCAvailable = false;
        for (UIViewController *vc in vcStack) {
            if ([vc isKindOfClass:[HubDevicesListViewController class]] || [vc isKindOfClass:[SetupTypeVC class]] ) {
                isVCAvailable = true;
            }
        }
        //DDLogDebug(@"isVCAvailable == %@", isVCAvailable ? @"true" : @"false");
        if (isVCAvailable == false) {
            [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
            if(!(self.navigateFromType == 3)){
                
                HubDevicesListViewController *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"HubDevicesListViewController"];
                //objVC.setupType = setupTp;
                objVC.arrSearchData = self.arrSearchData;
                objVC.navigateFromType =  self.navigateFromType;
                [self.navigationController pushViewController:objVC animated:NO];
            }
            else
            {
                
                HDASetupType setupTp = (HDASetupType)[[setupType valueForKey:@"DeviceType"] integerValue];
                if (setupTp == HDA_SetupVideoAudio) {
                    SetupTypeVC *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"SetupTypeVC"];
                    objVC.setupType = setupTp;
                    objVC.arrSearchData = self.arrSearchData;
                    [self.navigationController pushViewController:objVC animated:NO];
                } else {
                    [self pushToConnectionOptionVC:setupTp Animated:true];
                }
            }
            
        }
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}


-(void)pushToConnectionOptionVC:(HDASetupType)setupType Animated:(BOOL) isAnimated {
    @try {
        NSMutableArray *arrFilterData = [[NSMutableArray alloc] init];
        switch (setupType) {
            case HDA_SetupVideo: {
                for (SearchData *objData in self.arrSearchData) {
                    DDLogDebug(@"<%s>: %@ == %ld", __FUNCTION__, objData.strTitle, (long)objData.arrItems.count);
                    if (objData.modelType != HDA_MHUBAUDIO64) {
                        [arrFilterData addObject:objData];
                    }
                }
                break;
            }
            case HDA_SetupAudio: {
                for (SearchData *objData in self.arrSearchData) {
                    DDLogDebug(@"<%s>: %@ == %ld", __FUNCTION__, objData.strTitle, (long)objData.arrItems.count);
                    if (objData.modelType == HDA_MHUBAUDIO64) {
                        [arrFilterData addObject:objData];
                    }
                }
                break;
            }
            case HDA_SetupVideoAudio: {
                for (SearchData *objData in self.arrSearchData) {
                    DDLogDebug(@"<%s>: %@ == %ld", __FUNCTION__, objData.strTitle, (long)objData.arrItems.count);
                    if (objData.modelType != HDA_MHUB4K431 && objData.modelType != HDA_MHUB4K862) {
                        [arrFilterData addObject:objData];
                    }
                }
                break;
            }
            default:
                break;
        }
        ConnectionOptionVC *objVC = [mainStoryboard instantiateViewControllerWithIdentifier:@"ConnectionOptionVC"];
        objVC.setupType = setupType;
        objVC.arrSearchData = arrFilterData;
        [self.navigationController pushViewController:objVC animated:isAnimated];
    } @catch (NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

-(void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [[AppDelegate appDelegate] hideHudView:HideIndicator Message:@""];
}
@end
