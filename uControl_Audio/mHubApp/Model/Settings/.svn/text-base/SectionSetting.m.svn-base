//
//  SectionSetting.m
//  mHubApp
//
//  Created by Anshul Jain on 23/11/16.
//  Copyright Â© 2016 Rave Infosys. All rights reserved.
//

#import "SectionSetting.h"

@implementation RowSetting

+(RowSetting*) initWithTitle:(NSString*)strTitle Image:(UIImage*)imgRow {
    RowSetting *objReturn = [[RowSetting alloc] init];
    @try {
        objReturn.strTitle = strTitle;
        objReturn.imgRow = imgRow;
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    return objReturn;
}

+(RowSetting*) initWithTitle:(NSString*)strTitle Image:(UIImage*)imgRow RowInfo:(id)rowInfo {
    RowSetting *objReturn = [[RowSetting alloc] init];
    @try {
        objReturn.strTitle = strTitle;
        objReturn.imgRow = imgRow;
        objReturn.rowInfo = rowInfo;
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    return objReturn;
}

-(NSDictionary*) dictionaryRepresentation {
    @try {
        NSMutableDictionary* dict = [[NSMutableDictionary alloc] init];
        [dict setValue:self.strTitle forKey:kRowTitle];
        [dict setValue:self.imgRow forKey:kRowImage];
        [dict setValue:self.rowInfo forKey:kRowInfo];
        return dict;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

#pragma mark - ENCODER DECODER METHODS
- (void)encodeWithCoder:(NSCoder *)encoder {
    @try {
        //Encode properties, other class variables, etc
        [encoder encodeObject:self.strTitle forKey:kRowTitle];
        [encoder encodeObject:self.imgRow forKey:kRowImage];
        [encoder encodeObject:self.rowInfo forKey:kRowInfo];
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

- (id)initWithCoder:(NSCoder *)decoder {
    @try {
        if(self = [super init]) {
            //decode properties, other class vars
            self.strTitle = [decoder decodeObjectForKey:kRowTitle];
            self.imgRow = [decoder decodeObjectForKey:kRowImage];
            self.rowInfo = [decoder decodeObjectForKey:kRowInfo];
        }
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    return self;
}
@end

@implementation SectionSetting

+(SectionSetting*) initWithTitle:(NSString*)strTitle SectionType:(HDA_Sections)secType RowArray:(NSArray*)arrRows {
    SectionSetting *objReturn=[[SectionSetting alloc] init];
    @try {
        objReturn.Title = strTitle;
        objReturn.sectionType = secType;
        objReturn.arrRow = [[NSMutableArray alloc] initWithArray:arrRows];
        objReturn.exist_PowerCommandId = [objReturn.arrRow firstObject];
        objReturn.isExpand = true;
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    return objReturn;
}

//MARK: NEW Setting Options
+(NSMutableArray*) getMHUBSettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Resync UControl to MOS Object
        SectionSetting *objReSyncMOS = [SectionSetting initWithTitle:HUB_RESYNCUCONTROL_MHUBOS SectionType:HDA_Resync_MOS RowArray:[[NSArray alloc] init]];
        
        // Resync UControl to Cloud Object
        SectionSetting *objReSyncCloud = [SectionSetting initWithTitle:HUB_RESYNCUCONTROL_HDACLOUD SectionType:HDA_Resync_Cloud RowArray:[[NSArray alloc] init]];
        
        // HDA CLOUD Settings
        SectionSetting *objCloud = [SectionSetting initWithTitle:HUB_HDACLOUD_HEADER SectionType:HDA_HDACloud RowArray:[[NSArray alloc] init]];
        
        // MHUB System Setting Object
        SectionSetting *objSystem = [SectionSetting initWithTitle:HUB_MHUBSYSTEM SectionType:HDA_MHUBSystem RowArray:[[NSArray alloc] init]];
        
        // UCONTROL Settings Object
        SectionSetting *objUcontrol = [SectionSetting initWithTitle:HUB_UCONTROLSETTINGS SectionType:HDA_UControlSettings RowArray:[[NSArray alloc] init]];
        
        // Group Audio Volume Object
        SectionSetting *objGroupAudio = [SectionSetting initWithTitle:HUB_AUDIOGROUPS SectionType:HDA_GroupAudio RowArray:[[NSArray alloc] init]];
        
        if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV3) {
            [arrSettings addObject:objReSyncCloud];
            [arrSettings addObject:objSystem];
            [arrSettings addObject:objCloud];
            [arrSettings addObject:objUcontrol];
        } else {
            [arrSettings addObject:objReSyncMOS];
            [arrSettings addObject:objSystem];
            [arrSettings addObject:objUcontrol];
            
            if ([mHubManagerInstance.objSelectedHub isGroupSupport]) {
                [arrSettings addObject:objGroupAudio];
            }
        }
        return arrSettings;
        
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getMHUBSystemSettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        
        // Display IP Address
        NSString *strIPAddress = @"";
        if ([mHubManagerInstance.objSelectedHub isDemoMode]) {
            strIPAddress = [NSString stringWithFormat:HUB_NAMEANDIPADDRESS, @"DEMO MODE", @"DEMO ADDRESS",1.0];
        } else {
            strIPAddress = [NSString stringWithFormat:HUB_NAMEANDIPADDRESS, [Hub getMhubDisplayName:mHubManagerInstance.objSelectedHub], mHubManagerInstance.objSelectedHub.Address, mHubManagerInstance.objSelectedHub.mosVersion];
        }
        SectionSetting *objIPAddress = [SectionSetting initWithTitle:strIPAddress SectionType:HDA_NameAndAddress RowArray:[[NSArray alloc] init]];
        
        [arrSettings addObject:objIPAddress];
        
        for (int counter = 0; counter < mHubManagerInstance.arrSlaveAudioDevice.count; counter++) {
            Hub *objAudio = [mHubManagerInstance.arrSlaveAudioDevice objectAtIndex:counter];
            // Paired IP Address
            NSString *strIPPaired = @"";
            if ([objAudio.Address isEqualToString:STATICTESTIP_AUDIO]) {
                strIPPaired = [NSString stringWithFormat:HUB_PAIREDNAMEANDIPADDRESS, @"DEMO MODE", @"DEMO ADDRESS",1.0];
            } else {
                strIPPaired = [NSString stringWithFormat:HUB_PAIREDNAMEANDIPADDRESS, [Hub getMhubDisplayName:objAudio], objAudio.Address,objAudio.mosVersion];
            }
            SectionSetting *objIPPaired = [SectionSetting initWithTitle:strIPPaired SectionType:HDA_PairedNameAndAddress RowArray:[[NSArray alloc] init]];
            
            [arrSettings addObject:objIPPaired];
        }
        
        // Access MOS Object
        SectionSetting *objMOS = [SectionSetting initWithTitle:HUB_ACCESSMHUBOS SectionType:HDA_AccessMHUBOS RowArray:[[NSArray alloc] init]];
        
        // MANAGE UCONTROL PACKS Object
        SectionSetting *objUControlPacks = [SectionSetting initWithTitle:HUB_MANAGEUCONTROLPACKS SectionType:HDA_ManageUControlPacks RowArray:[[NSArray alloc] init]];
        
        // MANAGE SEQUENCES Object
        SectionSetting *objSequence = [SectionSetting initWithTitle:HUB_MANAGESEQUENCES SectionType:HDA_ManageMOSSequence RowArray:[[NSArray alloc] init]];
        
        // MANAGE Labels Object
        SectionSetting *objLabels = [SectionSetting initWithTitle:HUB_MANAGEZONESOURCELABELS SectionType:HDA_ManageLabels RowArray:[[NSArray alloc] init]];
        
        // Reset UControl Object
        SectionSetting *objReset = [SectionSetting initWithTitle:HUB_REMOVE_THIS_MHUB SectionType:HDA_RemoveUControl RowArray:[[NSArray alloc] init]];
        
        if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV3) {
            [arrSettings addObject:objMOS];
            [arrSettings addObject:objLabels];
        } else if (mHubManagerInstance.objSelectedHub.Generation == mHubMAX) {
            [arrSettings addObject:objMOS];
            [arrSettings addObject:objSequence];
        } else if (mHubManagerInstance.objSelectedHub.Generation == mHubAudio) {
            [arrSettings addObject:objMOS];
            [arrSettings addObject:objSequence];
        } else if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV4) {
            [arrSettings addObject:objMOS];
            [arrSettings addObject:objUControlPacks];
            [arrSettings addObject:objSequence];
        } else {
            if (![mHubManagerInstance.objSelectedHub isDemoMode]) {
                [arrSettings addObject:objMOS];
                [arrSettings addObject:objUControlPacks];
                [arrSettings addObject:objSequence];
            }
        }
        [arrSettings addObject:objReset];
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getManageLabelsSettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Manage Zone labels Object
        SectionSetting *objManageZone = [SectionSetting initWithTitle:HUB_ZONELABELS SectionType:HDA_ManageZonesLabels RowArray:[[NSArray alloc] init]];
        
        // Manage Source labels Object
        SectionSetting *objManageSource = [SectionSetting initWithTitle:HUB_SOURCELABELS SectionType:HDA_ManageSourceLabels RowArray:[[NSArray alloc] init]];
        
        [arrSettings addObject:objManageZone];
        [arrSettings addObject:objManageSource];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getHDACloudSettingsArray {
    @try {
        
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        
        //  CREATE ACCOUNT HDA CLOUDâ¢ Object
        SectionSetting *objCreate = [SectionSetting initWithTitle:HUB_CREATEHDACLOUDACCOUNT SectionType:HDA_Create_Cloud RowArray:[[NSArray alloc] init]];
        
        //  RESYNC UCONTROL WITH HDA CLOUDâ¢ Object
        SectionSetting *objReSync = [SectionSetting initWithTitle:HUB_RESYNCUCONTROL_HDACLOUD SectionType:HDA_Resync_Cloud RowArray:[[NSArray alloc] init]];
        
        //  BACKUP UCONTROL TO HDA CLOUDâ¢ Object
        SectionSetting *objBackup = [SectionSetting initWithTitle:HUB_BACKUPUCONTROLTOHDACLOUD SectionType:HDA_Backup_Cloud RowArray:[[NSArray alloc] init]];
        
        [arrSettings addObject:objCreate];
        [arrSettings addObject:objReSync];
        [arrSettings addObject:objBackup];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getUCONTROLSettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Display Settings Object
        SectionSetting *objDisplay = [SectionSetting initWithTitle:HUB_DISPLAYSETTINGS SectionType:HDA_DisplaySetting RowArray:[[NSArray alloc] init]];

        // Additional Customization Object
        SectionSetting *objAddCustomization = [SectionSetting initWithTitle:HUB_ADDITIONALCUSTOMISATION SectionType:HDA_AdditionalCustomization RowArray:[[NSArray alloc] init]];
        
        if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV3) {
            [arrSettings addObject:objDisplay];
        } else {
            [arrSettings addObject:objDisplay];
            [arrSettings addObject:objAddCustomization];
        }
        return arrSettings;
        
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}
/*
+(NSMutableArray*) getDisplaySettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Background Image Object
        NSMutableArray *arrBGOutputs = [[NSMutableArray alloc] init];
        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objZone = [RowSetting initWithTitle:strName Image:obj.imgControlGroupBG];
                [arrBGOutputs addObject:objZone];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.imgControlGroup];
                [arrBGOutputs addObject:objOutput];
            }
        }
        SectionSetting *objBGImage = [SectionSetting initWithTitle:HUB_ZONEBACKGROUNDIMAGE SectionType:HDA_Background RowArray:arrBGOutputs];
        
        // Theme Object
        RowSetting *objDark = [RowSetting initWithTitle:@"CARBONITE (DARK)" Image:kImageCheckMark];
        RowSetting *objLight = [RowSetting initWithTitle:@"SNOW (LIGHT)" Image:kImageCheckMark];
        SectionSetting *objTheme = [SectionSetting initWithTitle:HUB_THEMES SectionType:HDA_Theme RowArray:[[NSArray alloc] initWithObjects:objDark, objLight, nil]];
        
        RowSetting *objYes = [RowSetting initWithTitle:@"YES" Image:kImageCheckMark];
        RowSetting *objNo = [RowSetting initWithTitle:@"NO" Image:kImageCheckMark];
        SectionSetting *objButtonBorder = [SectionSetting initWithTitle:HUB_BUTTONBORDERS SectionType:HDA_ButtonBorder RowArray:[[NSArray alloc] initWithObjects:objYes, objNo, nil]];

        [arrSettings addObject:objBGImage];
        [arrSettings addObject:objTheme];
        
        if ([mHubManagerInstance.objSelectedHub isUControlSupport]) {
            [arrSettings addObject:objButtonBorder];
        }
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}
*/

+(NSMutableArray*) getDisplaySettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Background Image Object
        NSMutableArray *arrBGOutputs = [[NSMutableArray alloc] init];
        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objZone = [RowSetting initWithTitle:strName Image:obj.imgControlGroupBG];
                [arrBGOutputs addObject:objZone];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.imgControlGroup];
                [arrBGOutputs addObject:objOutput];
            }
        }
        SectionSetting *objBGImage = [SectionSetting initWithTitle:HUB_ZONEBACKGROUNDIMAGE SectionType:HDA_Background RowArray:arrBGOutputs];
        objBGImage.isExpand = true;
        [arrSettings addObject:objBGImage];

        
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getAdditionalCustomizationArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Menu Settings Object
        SectionSetting *objMenuSetting = [SectionSetting initWithTitle:HUB_MENUSETTINGS SectionType:HDA_MenuSettings RowArray:[[NSArray alloc] init]];
        
        // set App Quick Actions Object
        SectionSetting *objQuickActions = [SectionSetting initWithTitle:HUB_SETAPPQUICKACTIONS SectionType:HDA_SetAppQuickAction RowArray:[[NSArray alloc] init]];
        
        // Set Button Vibration Object
        SectionSetting *objButtonVibration = [SectionSetting initWithTitle:HUB_BUTTONVIBRATION SectionType:HDA_ButtonVibration RowArray:[[NSArray alloc] init]];

        [arrSettings addObject:objMenuSetting];
        
        if (mHubManagerInstance.objSelectedHub.Generation != mHub4KV3) {
            if (mHubManagerInstance.objSelectedHub.HubSequenceList.count > 0) {
                [arrSettings addObject:objQuickActions];
            }
            [arrSettings addObject:objButtonVibration];
        }
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getMenuSettingsArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Manage Zones Object
        NSMutableArray *arrManageZones = [[NSMutableArray alloc] init];

        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        }
        SectionSetting *objManageZones = [SectionSetting initWithTitle:HUB_MANAGEZONES SectionType:HDA_ManageZones RowArray:arrManageZones];
        
        // Manage Sequence Object
        NSArray *arrSequences = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubSequenceList];
        NSMutableArray *arrManageSeq = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSequences count]; counter++) {
            Sequence *objSeq = [arrSequences objectAtIndex:counter];
            NSString *strName = objSeq.uControl_name;
            RowSetting *objRow = [RowSetting initWithTitle:strName Image:objSeq.isDeleted ? nil : kImageCheckMark RowInfo:objSeq];
            [arrManageSeq addObject:objRow];
        }
        SectionSetting *objManageSequence = [SectionSetting initWithTitle:HUB_MANAGESEQUENCES SectionType:HDA_ManageSequences RowArray:arrManageSeq];
        
        // Manage Source Object
        NSArray *arrSource = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubInputData];
        NSMutableArray *arrManageSource = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSource count]; counter++) {
            InputDevice *obj = [arrSource objectAtIndex:counter];
            NSString *strName = obj.CreatedName;
            RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
            [arrManageSource addObject:objOutput];
        }
        SectionSetting *objManageSource = [SectionSetting initWithTitle:HUB_MANAGESOURCEDEVICES SectionType:HDA_ManageSource RowArray:arrManageSource];
        
        [arrSettings addObject:objManageZones];
        [arrSettings addObject:objManageSequence];
        [arrSettings addObject:objManageSource];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getSetAppQuickActionArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
   
        // Manage Sequence Object
        NSArray *arrSequences = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubSequenceList];
        NSMutableArray *arrManageSeq = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSequences count]; counter++) {
            Sequence *objSeq = [arrSequences objectAtIndex:counter];
            NSString *strName = objSeq.uControl_name;
            BOOL isShortcutAvailable = [mHubManagerInstance searchQuickActionInShortcutItems:objSeq];
            RowSetting *objRow = [RowSetting initWithTitle:strName Image:isShortcutAvailable ? kImageCheckMark : nil RowInfo:objSeq];
            [arrManageSeq addObject:objRow];
        }
        SectionSetting *objManageSequence = [SectionSetting initWithTitle:HUB_MANAGEQUICKACTIONS SectionType:HDA_ManageQuickAction RowArray:arrManageSeq];
        objManageSequence.isExpand = true;

        [arrSettings addObject:objManageSequence];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}



//MARK: NEW Setting Menu
+(NSMutableArray*) getMHUBSettingsArray_2 {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];

        // Display IP Address
        NSString *strIPAddress = @"";
        if ([mHubManagerInstance.objSelectedHub isDemoMode]) {
            strIPAddress = [NSString stringWithFormat:HUB_NAMEANDIPADDRESS, @"DEMO MODE", @"DEMO ADDRESS",1.0];
        } else {
            if(mHubManagerInstance.arrSlaveAudioDevice.count > 0){
            strIPAddress = [NSString stringWithFormat:HUB_NAMEANDIPADDRESS, [Hub getMhubDisplayName:mHubManagerInstance.objSelectedHub], mHubManagerInstance.objSelectedHub.Address,mHubManagerInstance.objSelectedHub.mosVersion];
            }
            else{
                strIPAddress = [NSString stringWithFormat:HUB_NAMEANDIPADDRESS_STANDALONE, [Hub getMhubDisplayName:mHubManagerInstance.objSelectedHub], mHubManagerInstance.objSelectedHub.Address,mHubManagerInstance.objSelectedHub.mosVersion];
                
            }
        }
        SectionSetting *objIPAddress = [SectionSetting initWithTitle:strIPAddress SectionType:HDA_NameAndAddress RowArray:[[NSArray alloc] init]];

        [arrSettings addObject:objIPAddress];

        for (int counter = 0; counter < mHubManagerInstance.arrSlaveAudioDevice.count; counter++) {
            Hub *objAudio = (Hub *)[mHubManagerInstance.arrSlaveAudioDevice objectAtIndex:counter];
            [APIManager writeNormalStringWithTimeStamp:[NSString stringWithFormat:@"METHOD:*getMHUBSettingsArray_2*\nobjAudio.strMOSVersion=%@\nobjAudio.mosVersion=%f",objAudio.strMOSVersion,objAudio.mosVersion]];
            // Paired IP Address
            NSString *strIPPaired = @"";
            if ([objAudio.Address isEqualToString:STATICTESTIP_AUDIO]) {
                strIPPaired = [NSString stringWithFormat:HUB_PAIREDNAMEANDIPADDRESS, @"DEMO MODE", @"DEMO ADDRESS",1.0];
            } else {
                strIPPaired = [NSString stringWithFormat:HUB_PAIREDNAMEANDIPADDRESS, [Hub getMhubDisplayName:objAudio], objAudio.Address,objAudio.mosVersion];
            }
            SectionSetting *objIPPaired = [SectionSetting initWithTitle:strIPPaired SectionType:HDA_PairedNameAndAddress RowArray:[[NSArray alloc] init]];

            [arrSettings addObject:objIPPaired];
        }

        // Resync UControl to MOS Object
        // Display Name
        NSString *strDisplayName = @"";
        if ([mHubManagerInstance.objSelectedHub isDemoMode]) {
            strDisplayName = [NSString stringWithFormat:HUB_RESYNCUCONTROL_DEVICE, @"DEMO MODE"];
        } else {
            strDisplayName = [NSString stringWithFormat:HUB_RESYNCUCONTROL_DEVICE, [Hub getMhubDisplayName:mHubManagerInstance.objSelectedHub]];
        }

        SectionSetting *objReSyncMOS = [SectionSetting initWithTitle:strDisplayName  SectionType:HDA_Resync_MOS RowArray:[[NSArray alloc] init]];

        // Resync UControl to Cloud Object
        SectionSetting *objReSyncCloud = [SectionSetting initWithTitle:HUB_RESYNCUCONTROL_HDACLOUD SectionType:HDA_Resync_Cloud RowArray:[[NSArray alloc] init]];

        // HDA CLOUD Settings
        SectionSetting *objCloud = [SectionSetting initWithTitle:HUB_HDACLOUD_HEADER SectionType:HDA_HDACloud RowArray:[[NSArray alloc] init]];

        // Access MOS Object
        SectionSetting *objMOS = [SectionSetting initWithTitle:HUB_ACCESSMHUBOS SectionType:HDA_AccessMHUBOS RowArray:[[NSArray alloc] init]];

        // MANAGE UCONTROL PACKS Object
        SectionSetting *objUControlPacks = [SectionSetting initWithTitle:HUB_MANAGEUCONTROLPACKS SectionType:HDA_ManageUControlPacks RowArray:[[NSArray alloc] init]];
        
        // MANAGE MOS Update
        SectionSetting *advanceOption = [SectionSetting initWithTitle:HUB_ADVANCE_UPDATE_MOS SectionType:HDA_Advanced RowArray:[[NSArray alloc] init]];

        // MANAGE SEQUENCES Object
        SectionSetting *objSequence = [SectionSetting initWithTitle:HUB_MANAGESEQUENCES SectionType:HDA_ManageMOSSequence RowArray:[[NSArray alloc] init]];

        // MANAGE SEQUENCES Object
        SectionSetting *objLabels = [SectionSetting initWithTitle:HUB_MANAGEZONESOURCELABELS SectionType:HDA_ManageLabels RowArray:[[NSArray alloc] init]];


        if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV3) {
            [arrSettings addObject:objReSyncCloud];
            [arrSettings addObject:objCloud];
            [arrSettings addObject:objMOS];
            [arrSettings addObject:objLabels];
        } else {
            [arrSettings addObject:objReSyncMOS];
            

            if (![mHubManagerInstance.objSelectedHub isDemoMode]) {
                [arrSettings addObject:objMOS];
                [arrSettings addObject:objSequence];
                if ([mHubManagerInstance.objSelectedHub isUControlSupport]) {
                    [arrSettings addObject:objUControlPacks];
                }
                [arrSettings addObject:advanceOption];
            }
        }
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getMHUBSettingsArray_3 {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];

        // Manage Zones Object
        NSMutableArray *arrManageZones = [[NSMutableArray alloc] init];
        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        }
        SectionSetting *objManageZones = [SectionSetting initWithTitle:HUB_MANAGEZONES SectionType:HDA_ManageZones RowArray:arrManageZones];

        // Manage Sequence Object
        NSArray *arrSequences = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubSequenceList];
        NSMutableArray *arrManageSeq = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSequences count]; counter++) {
            Sequence *objSeq = [arrSequences objectAtIndex:counter];
            NSString *strName = objSeq.uControl_name;
            RowSetting *objRow = [RowSetting initWithTitle:strName Image:objSeq.isDeleted ? nil : kImageCheckMark RowInfo:objSeq];
            [arrManageSeq addObject:objRow];
        }
        SectionSetting *objManageSequence = [SectionSetting initWithTitle:HUB_MANAGESEQUENCES SectionType:HDA_ManageSequences RowArray:arrManageSeq];

        // Manage Source Object
        NSArray *arrSource = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubInputData];
        NSMutableArray *arrManageSource = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSource count]; counter++) {
            InputDevice *obj = [arrSource objectAtIndex:counter];
            NSString *strName = obj.CreatedName;
            RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
            [arrManageSource addObject:objOutput];
        }
        SectionSetting *objManageSource = [SectionSetting initWithTitle:HUB_MANAGESOURCEDEVICES SectionType:HDA_ManageSource RowArray:arrManageSource];

        // Background Image Object
        NSMutableArray *arrBGOutputs = [[NSMutableArray alloc] init];
        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objZone = [RowSetting initWithTitle:strName Image:obj.imgControlGroupBG];
                [arrBGOutputs addObject:objZone];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.imgControlGroup];
                [arrBGOutputs addObject:objOutput];
            }
        }
        SectionSetting *objBGImage = [SectionSetting initWithTitle:HUB_ZONEBACKGROUNDIMAGE SectionType:HDA_Background RowArray:arrBGOutputs];

        // Theme Object
        SectionSetting *objTheme = [SectionSetting initWithTitle:HUB_THEMES SectionType:HDA_Theme RowArray:[[NSArray alloc] init]];

        // Button Border Object
        SectionSetting *objButtonBorder = [SectionSetting initWithTitle:HUB_BUTTONBORDERS SectionType:HDA_ButtonBorder RowArray:[[NSArray alloc] init]];

        // Vibration Object
        SectionSetting *objButtonVibration = [SectionSetting initWithTitle:HUB_BUTTONVIBRATION SectionType:HDA_ButtonVibration RowArray:[[NSArray alloc] init]];
        
        

        // set App Quick Actions Object
        SectionSetting *objQuickActions = [SectionSetting initWithTitle:HUB_SETAPPQUICKACTIONS SectionType:HDA_SetAppQuickAction RowArray:[[NSArray alloc] init]];

        //Group Audio Volume Object
        SectionSetting *objGroupAudio = [SectionSetting initWithTitle:HUB_AUDIOGROUPS SectionType:HDA_GroupAudio RowArray:[[NSArray alloc] init]];
        
        // Send Buglife repot Object
        SectionSetting *objButtonSendBug = [SectionSetting initWithTitle:HUB_BUTTONSENDREPORTORBUG SectionType:HDA_SendBugReport RowArray:[[NSArray alloc] init]];


        if (mHubManagerInstance.objSelectedHub.Generation == mHub4KV3) {
            [arrSettings addObject:objBGImage];
            [arrSettings addObject:objTheme];

        } else {
            [arrSettings addObject:objManageZones];
            [arrSettings addObject:objManageSource];
            if (mHubManagerInstance.objSelectedHub.HubSequenceList.count > 0) {
                [arrSettings addObject:objManageSequence];
            }
            [arrSettings addObject:objBGImage];
            [arrSettings addObject:objTheme];

            if ([mHubManagerInstance.objSelectedHub isUControlSupport]) {
                [arrSettings addObject:objButtonBorder];
            }
            [arrSettings addObject:objButtonVibration];
            [arrSettings addObject:objButtonSendBug];
            if (mHubManagerInstance.objSelectedHub.HubSequenceList.count > 0) {
                [arrSettings addObject:objQuickActions];
            }

            if ([mHubManagerInstance.objSelectedHub isGroupSupport]) {
                [arrSettings addObject:objGroupAudio];
            }
        }
        return arrSettings;

    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}


+(NSMutableArray*) getMenuSettingsArray_ForManageZone {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Manage Zones Object
        NSMutableArray *arrManageZones = [[NSMutableArray alloc] init];
        
        if ([mHubManagerInstance.objSelectedHub isAPIV2]) {
            NSArray *arrZones = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubZoneData];
            for (int counter = 0; counter < [arrZones count]; counter++) {
                Zone *obj = [arrZones objectAtIndex:counter];
                NSString *strName = obj.zone_label;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        } else {
            NSArray *arrOutputs = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubOutputData];
            for (int counter = 0; counter < [arrOutputs count]; counter++) {
                OutputDevice *obj = [arrOutputs objectAtIndex:counter];
                NSString *strName = obj.CreatedName;
                RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
                [arrManageZones addObject:objOutput];
            }
        }
        SectionSetting *objManageZones = [SectionSetting initWithTitle:HUB_MANAGEZONES SectionType:HDA_ManageZones RowArray:arrManageZones];
        [arrSettings addObject:objManageZones];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getMenuSettingsArray_ForManageSource {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Manage Source Object
        NSArray *arrSource  = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubInputData];
        NSMutableArray *arrManageSource = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSource count]; counter++) {
            InputDevice *obj = [arrSource objectAtIndex:counter];
            NSString *strName = obj.CreatedName;
            RowSetting *objOutput = [RowSetting initWithTitle:strName Image:obj.isDeleted ? nil : kImageCheckMark];
            [arrManageSource addObject:objOutput];
        }
        SectionSetting *objManageSource = [SectionSetting initWithTitle:HUB_MANAGESOURCEDEVICES SectionType:HDA_ManageSource RowArray:arrManageSource];
        [arrSettings addObject:objManageSource];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}


+(NSMutableArray*) getMenuSettingsArray_ForManageSequences {

    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        
        
        // Manage Sequence Object
        NSArray *arrSequences = [[NSArray alloc] initWithArray:mHubManagerInstance.objSelectedHub.HubSequenceList];
        NSMutableArray *arrManageSeq = [[NSMutableArray alloc] init];
        for (int counter = 0; counter < [arrSequences count]; counter++) {
            Sequence *objSeq = [arrSequences objectAtIndex:counter];
            NSString *strName = objSeq.uControl_name;
            RowSetting *objRow = [RowSetting initWithTitle:strName Image:objSeq.isDeleted ? nil : kImageCheckMark RowInfo:objSeq];
            [arrManageSeq addObject:objRow];
        }
        SectionSetting *objManageSequence = [SectionSetting initWithTitle:HUB_MANAGESEQUENCES SectionType:HDA_ManageSequences RowArray:arrManageSeq];

        [arrSettings addObject:objManageSequence];
        
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}
+(NSMutableArray*) getDisplaySettingsArray_ButtonBorder {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];

        RowSetting *objYes = [RowSetting initWithTitle:@"YES" Image:kImageCheckMark];
        RowSetting *objNo = [RowSetting initWithTitle:@"NO" Image:kImageCheckMark];
        SectionSetting *objButtonBorder = [SectionSetting initWithTitle:HUB_BUTTONBORDERS SectionType:HDA_ButtonBorder RowArray:[[NSArray alloc] initWithObjects:objYes, objNo, nil]];
        objButtonBorder.isExpand = true;
        if ([mHubManagerInstance.objSelectedHub isUControlSupport]) {
            [arrSettings addObject:objButtonBorder];
        }
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getDisplaySettingsArray_Theme {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];
        // Theme Object
        RowSetting *objDark = [RowSetting initWithTitle:@"CARBONITE (DARK)" Image:kImageCheckMark];
        RowSetting *objLight = [RowSetting initWithTitle:@"SNOW (LIGHT)" Image:kImageCheckMark];
        SectionSetting *objTheme = [SectionSetting initWithTitle:HUB_THEMES SectionType:HDA_Theme RowArray:[[NSArray alloc] initWithObjects:objDark, objLight, nil]];
        objTheme.isExpand = true;
        [arrSettings addObject:objTheme];

        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

+(NSMutableArray*) getVibrationArray {
    @try {
        NSMutableArray *arrSettings = [[NSMutableArray alloc] init];

        RowSetting *objYes = [RowSetting initWithTitle:@"YES" Image:kImageCheckMark];
        RowSetting *objNo = [RowSetting initWithTitle:@"NO" Image:kImageCheckMark];
        SectionSetting *objButtonVibration = [SectionSetting initWithTitle:HUB_BUTTONVIBRATION SectionType:HDA_ButtonVibration RowArray:[[NSArray alloc] initWithObjects:objYes, objNo, nil]];
        objButtonVibration.isExpand = true;
        [arrSettings addObject:objButtonVibration];
        return arrSettings;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

//MARK: ENCODE DECODE METHODS
-(NSDictionary*) dictionaryRepresentation
{
    @try {
        NSMutableDictionary* dict = [[NSMutableDictionary alloc] init];
        [dict setValue:self.Title forKey:kSectionTitle];
        [dict setValue:[NSNumber numberWithInteger:self.sectionType] forKey:kSectionType];
        [dict setValue:self.arrRow forKey:kRowArray];
        [dict setValue:[NSNumber numberWithBool:self.isExpand] forKey:kIsExpand];
        return dict;
    } @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

#pragma mark - ENCODER DECODER METHODS
- (void)encodeWithCoder:(NSCoder *)encoder {
    @try {
        //Encode properties, other class variables, etc
        [encoder encodeObject:self.Title forKey:kSectionTitle];
        [encoder encodeInteger:self.sectionType forKey:kSectionType];
        [encoder encodeObject:self.arrRow forKey:kRowArray];
        [encoder encodeBool:self.isExpand forKey:kIsExpand];
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
}

- (id)initWithCoder:(NSCoder *)decoder {
    @try {
        if(self = [super init]) {
            //decode properties, other class vars
            self.Title          = [decoder decodeObjectForKey:kSectionTitle];
            self.sectionType    = (HDA_Sections)[decoder decodeIntegerForKey:kSectionType];
            self.arrRow         = [decoder decodeObjectForKey:kRowArray];
            self.isExpand       = [decoder decodeBoolForKey:kIsExpand];
        }
    }
    @catch(NSException *exception) {
        [[AppDelegate appDelegate] exceptionLog:exception Function:__PRETTY_FUNCTION__ Line:__LINE__];
    }
    return self;
}

@end
